name: Release
on:
  workflow_dispatch:

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest

    permissions: 
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create config.php
        run: |
          echo "<?php" > config.php
          echo "define ('DIR_BASE', $_SERVER['DOCUMENT_ROOT'].'/');" >> config.php
          echo "define('DIR_CONTROLLERS', DIR_BASE . 'src/controllers/');" >> config.php
          echo "define('DIR_MODELS', DIR_BASE . 'src/models/');" >> config.php
          echo "define('DIR_REPO', DIR_BASE . 'src/repository/');" >> config.php
          echo "define('DIR_TEMPLATES', DIR_BASE . 'src/templates/');" >> config.php
          echo "define('DIR_SESSION', DIR_BASE . 'src/utils/');" >> config.php
          echo "define('DB', 'database');" >> config.php
          echo "define('USER', 'root');" >> config.php
          echo "define('PASS', '${{secrets.DB_PASSWORD}}');" >> config.php
          echo "define('DB_NAME', 'neflis');" >> config.php
          echo "define('PAGE_SIZE', 60);" >> config.php
          echo "define('API_IMAGE_URL', 'https://image.tmdb.org/t/p/w500');" >> config.php
          echo "define('KEY', '${{secrets.API_KEY}}');" >> config.php
          echo "define('API', 'https://api.themoviedb.org/3/movie/popular?api_key=' . KEY . '&language=en-US');"
          echo "define('API_TRENDING', 'https://api.themoviedb.org/3/trending/movie/week?api_key=' . KEY . '&language=en-US&page=1');" >> config.php
          echo "define('API_GENRES', 'https://api.themoviedb.org/3/genre/movie/list?api_key=' . KEY . '&language=en-US');" >> config.php
        
        
      - name: Get current version
        id: get_version
        run: |
          VERSION=$(grep 'VERSION=' version.txt | cut -d'=' -f2 | cut -d'-' -f1)
          echo "::set-output name=version::$VERSION"

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          generateReleaseNotes: true
          tag: ${{ steps.get_version.outputs.version }}
          token: ${{ secrets.GH_TOKEN }}
          draft: false
          prerelease: false

      - name: Configure Git User
        run: | 
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"

      - name: Create SNAPSHOT and Update
        id: create_snapshot
        run: |
          VERSION=$(grep 'VERSION=' version.txt | cut -d'=' -f2)
          MAJOR=$(echo $VERSION | cut -d'.' -f1)
          MINOR=$(echo $VERSION | cut -d'.' -f2)
          PATCH=$(echo $VERSION | cut -d'.' -f3 | cut -d'-' -f1)
          NEW_MINOR=$((MINOR + 1))
          NEW_VERSION="$MAJOR.$NEW_MINOR.$PATCH-SNAPSHOT"
          sed -i "s/$VERSION/$NEW_VERSION/" version.txt
          echo "::set-output name=new_version::$NEW_VERSION"
          git add .
          git commit -m "Update develop version"
          git push origin main

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & push
        uses: docker/build-push-action@v3
        with:
          context: .
          dockerfile: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/moviehouse:${{ steps.get_version.outputs.version }}